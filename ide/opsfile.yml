# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

version: '3'

vars:
  FL: ""

tasks:

  prereq:
    silent: true
    cmds:
      - >
        test "$(($NUVDEV_VERSION +0))" -gt 2404130000 
        || die "Your .devcontainer.json is outdated - update it from here: https://raw.githubusercontent.com/mastrogpt/starter/main/.devcontainer.json"
      - test -e "/.nuvolaris" || test -n "$NUVDEV_FORCE" || die "This command must be run in a Nuvolaris DevContainer"
      - test "$(python3 -V | awk -F. '{print $2}')" -ge 10 || die "python 3.10 or greater not available"
      - test "$(node -v | awk -F. '{print substr($1,2) }')" -ge 18 || die "nodejs 18 or greater not available"
      - test "$(printf '%s\n' "$(bun -v)" "1.1.18" | sort -V | head -n 1)" = "1.1.18" || die "bun 1.1.18 or greater not available"
      - test -d "$NUV_PWD/packages" || die "no packages in current directory"
      - test -e ~/.wskprops || die "please run 'nuv ide login' first"
      - test -n "$NUVDEV_HOST" || die "please run 'nuv ide login' first"
      - |
        if ! test -d "$NUV_ROOT/ide2/deploy/node_modules"
          then cd $NUV_ROOT/ide2/deploy && bun install
        fi
      - |
        if test -e "$NUV_PWD/package.json"
        then if ! test -d "$NUV_PWD/node_modules"
             then cd $NUV_PWD ; npm install
             fi
        fi
      - |
        if ! python3 -m pip list | grep watchfiles >/dev/null 2>/dev/null
        then
            PIP_FLAG="--user"
            if which python3 | grep $HOME >/dev/null
            then PIP_FLAG=""
            fi
            python3 -m pip install $PIP_FLAG watchfiles asyncio
        fi
      - |
        if ! which http-server >/dev/null 2>/dev/null
        then npm install -g http-server
        fi
      - task: kill

  deploy:
    silent: true
    interactive: true
    desc: deploy a project or a single action (with _action_=<dir-or-file>)
    cmds:
      - task: prereq
      - |
        set -a
        if test -e $NUV_PWD/.env
        then source $NUV_PWD/.env
        fi
        if test -e $NUV_PWD/packages/.env
        then source $NUV_PWD/packages/.env
        fi
        if {{.__dry_run}}
        then DRY="--dry-run" ; ECHO='echo'
        else DRY="" ; ECHO=""
        fi
        if test -z "{{._action_}}"
        then
            bun {{.TASKFILE_DIR}}/deploy/index.js "$NUV_PWD" -d $DRY 
            $ECHO nuv web upload web
            echo "URL: $NUVDEV_HOST"
        else
            bun {{.TASKFILE_DIR}}/deploy/index.js "$NUV_PWD" -s "{{._action_}}" $DRY            
        fi

  devel:
    interactive: true
    silent: true
    desc: start interactive development mode files
    cmds:
      - task: prereq
      - |
        set -a
        if test -e $NUV_PWD/.env
        then source $NUV_PWD/.env
        fi
        if test -e $NUV_PWD/packages/.env
        then source $NUV_PWD/packages/.env
        fi
        if {{.__dry_run}}
        then DRY="--dry-run" ; ECHO='echo'
        else DRY="" ; ECHO=""
        fi
        if cat /proc/version | grep -i microsoft
        then export WATCHFILES_FORCE_POLLING=1
        fi
        #python3 -m deploy "$NUV_PWD" -w $DRY
        bun {{.TASKFILE_DIR}}/deploy/index.js "$NUV_PWD" -w $DRY
        #npm-run-all --parallel deploy serve
        true

  kill:
    silent: true
    ignore_errors: true
    cmds:
      - |
        if test -e ~/.nuv/tmp/deploy.pgrp
        then
          PGRP="$(cat ~/.nuv/tmp/deploy.pgrp)"
          #pstree $PID
          LOOP=true
          while $LOOP
          do
            LOOP=false
            ps -a -o pgid,pid,stat | grep -v 'Z' | while read GRP PID STAT
            do 
              echo Terminating $PID in $GRP
              if test "$GRP" = "$PGRP"
              then #echo $GRP $PID
                   kill -9 "$PID" 
                   LOOP=true
              fi 
            done
            sleep 2
          done
          rm ~/.nuv/tmp/deploy.pgrp
        fi



